1.
In the dissassembled machine code, there are 2 commands related to the error:
0x547893  48 c1 ff 02     sar $0x2,%rdi   rdi=0x4a85d2d0
0x547920  48 8d 04 ad 02 00 00 00 lea 0x2(,%rbp,4),%rax   rax=0x7fffffff73ab3b42

The first command shifts the data 2 bits to the right. This is because elisp operates on 62 bits
of data instead of 64. Later, the lea instruction is used to shift the number left by 2 again,
at which case the value may overflow.

2.
It is possible to observe the source code for this in data.c and lisp.h:
data.c:
DEFVAR_LISP ("most-negative-fixnum", Vmost_negative_fixnum,
            doc: /* The smallest value that is representable in a Lisp integer.  */);
Vmost_negative_fixnum = make_number (MOST_NEGATIVE_FIXNUM);
XSYMBOL (intern_c_string ("most-negative-fixnum"))->constant = 1;
lisp.h:
#define MOST_POSITIVE_FIXNUM (EMACS_INT_MAX >> INTTYPEBITS)
#define MOST_NEGATIVE_FIXNUM (-1 - MOST_POSITIVE_FIXNUM)

int max is the long number, 0x7fff ffff ffff ffff, which is then right shifted twice
0x1fff ffff ffff ffff (to make the most positive fixed number). The most negative fixed
number is '-1 - most positive number' which gives you 0xe000 0000 0000 0000 which is
-2305843009213693952.

3.
The most-positive-fixnum is 0x1fff ffff ffff ffff. Multiplying this number by itself 3 times
(effectively taking it to the power 4) returns the value with the lowest 64 bits:
0x8000 0000 0000 0001. This value is shifted left and right by 2 (as explained in question 1)
which effectively masks the first 2 bits: the result is 0x0000 0000 0000 0001 or 1.

4.
-fwrapv will does not solve the overflow trouble, because if the product overflows, the
correct value still is not saved and instead wraps around. For example, suppose that Tmax is
60, Tmin is 0, and you're multiplying 25 by 3: instead of getting 75 you would get 15, as the
value wraps around. Essentially, just as how emacs does not solve overflow regularly, -fwrapv
does not either. Note: -fwrapv does not throw any errors unlike -fsanitize=undefined as explained
in the testovf.txt part of the homework.

5.
(make-string 1000 ? X) creates 'XXXX...XXXX' (a string of 1000 Xs)
(concat (make-string 1000 ? X) "0") creates 'XXXX...XXXX0'
format-time-string creates a string with the date values

In the disassembled machine code, the instruction pointer enters a loop before
the program crashes, where the machine moves the values xmm7, xmm6, xmm5, and xmm4 into
the registers -0x10(%rdi) -0x20(%rdi) -0x30(%rdi) and -0x40(%rdi) respectively. On each
iteration of the loop, the values for xmm7, xmm6, xmm5, and xmm4 change, and %rdi is
incremented by 0x40. Eventually %rdi will point outside the stack (%rdi-10 > %rbp) which
causes a segmentation fault when the program tries to move the value in the xmm7 into
-0x10(%rdi).

The specific line that causes the crash is the following:
0x7ffff173949b <__strcpy_sse2_unaligned+411>:	f3 0f 7f 7f f0	movdqu %xmm7,-0x10(%rdi)
